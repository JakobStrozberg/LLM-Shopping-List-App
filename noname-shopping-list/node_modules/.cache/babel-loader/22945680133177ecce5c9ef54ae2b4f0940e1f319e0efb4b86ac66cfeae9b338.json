{"ast":null,"code":"export class CSVDataLoader {\n  static async loadProducts() {\n    if (this.isLoaded) {\n      return this.products;\n    }\n    if (this.isLoading) {\n      // Wait for current loading to complete\n      while (this.isLoading) {\n        await new Promise(resolve => setTimeout(resolve, 100));\n      }\n      return this.products;\n    }\n    this.isLoading = true;\n    try {\n      const products = [];\n\n      // Try to load 2025 data first (has images)\n      try {\n        const apr2025Products = await this.loadCSVFile('/Dataset/grocery_data_apr_2025.csv', 300);\n        products.push(...apr2025Products);\n        console.log(`Loaded ${apr2025Products.length} products from April 2025 data`);\n      } catch (error) {\n        console.warn('Could not load April 2025 data:', error);\n      }\n\n      // Try to load more 2025 data\n      try {\n        const jan2025Products = await this.loadCSVFile('/Dataset/grocery_data_jan_2025.csv', 200);\n        products.push(...jan2025Products);\n        console.log(`Loaded ${jan2025Products.length} products from January 2025 data`);\n      } catch (error) {\n        console.warn('Could not load January 2025 data:', error);\n      }\n\n      // Load 2023 data as fallback (no images but good names)\n      try {\n        const sep2023Products = await this.loadCSVFile('/Dataset/grocery_data_sep_2023_clean.csv', 100);\n        products.push(...sep2023Products);\n        console.log(`Loaded ${sep2023Products.length} products from September 2023 data`);\n      } catch (error) {\n        console.warn('Could not load September 2023 data:', error);\n      }\n\n      // If we got some products, use them\n      if (products.length > 0) {\n        this.products = products;\n        this.isLoaded = true;\n        console.log(`✅ Successfully loaded ${products.length} total products from CSV data`);\n        return this.products;\n      }\n\n      // Otherwise fall back to mock data\n      throw new Error('No products could be loaded from CSV files');\n    } catch (error) {\n      console.error('❌ Failed to load CSV data, falling back to mock data:', error);\n      this.products = this.getFallbackMockProducts();\n      this.isLoaded = true;\n      return this.products;\n    } finally {\n      this.isLoading = false;\n    }\n  }\n  static async loadCSVFile(filePath, limit) {\n    try {\n      // Try to load from public folder first\n      const response = await fetch(filePath);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const csvText = await response.text();\n      return this.parseCSV(csvText, limit);\n    } catch (error) {\n      console.warn(`Could not load ${filePath} from public folder:`, error);\n      throw error;\n    }\n  }\n  static parseCSV(csvText, limit) {\n    const lines = csvText.split('\\n');\n    if (lines.length < 2) return [];\n    const headers = lines[0].split(',').map(h => h.trim().replace(/\"/g, ''));\n    const products = [];\n\n    // Determine which CSV format we're dealing with\n    const hasProductId = headers.includes('productId');\n    const hasName = headers.includes('Name');\n    const maxRows = limit ? Math.min(lines.length - 1, limit) : lines.length - 1;\n    for (let i = 1; i <= maxRows && products.length < (limit || Infinity); i++) {\n      try {\n        const values = this.parseCSVLine(lines[i]);\n        if (values.length < headers.length - 2) continue; // Skip incomplete rows\n\n        const row = {};\n        headers.forEach((header, index) => {\n          if (values[index]) {\n            row[header] = values[index].trim().replace(/\"/g, '');\n          }\n        });\n        let product = null;\n        if (hasProductId && row.productId) {\n          // New format (2025 data)\n          const imageUrl = this.extractImageUrl(row.productImage);\n          product = {\n            id: row.productId,\n            name: row.title || 'Unknown Product',\n            description: row.description || '',\n            image: imageUrl,\n            brand: row.brand || undefined\n          };\n\n          // Debug log for first few products\n          if (i < 5 && imageUrl) {\n            console.log(`Product: ${product.name}, Image URL: ${imageUrl}`);\n          }\n        } else if (hasName && row.Name) {\n          // Old format (2023 data) - try to get image from URL column if exists\n          const imageUrl = row['Product URL'] ? this.extractImageFromProductUrl(row['Product URL']) : undefined;\n          product = {\n            id: row['Product ID'] || `legacy_${i}`,\n            name: row.Name,\n            description: row['Price Per Each'] || row['Current Price'] || '',\n            image: imageUrl,\n            brand: row['Category'] || undefined\n          };\n        }\n        if (product && product.name && product.name.length > 2) {\n          products.push(product);\n        }\n      } catch (error) {\n        // Skip malformed rows\n        continue;\n      }\n    }\n    return products;\n  }\n  static parseCSVLine(line) {\n    const result = [];\n    let current = '';\n    let inQuotes = false;\n    let inBrackets = false;\n    for (let i = 0; i < line.length; i++) {\n      const char = line[i];\n      const nextChar = line[i + 1];\n\n      // Handle quotes\n      if (char === '\"' && (i === 0 || line[i - 1] === ',')) {\n        inQuotes = true;\n        continue;\n      } else if (char === '\"' && inQuotes && (nextChar === ',' || nextChar === undefined)) {\n        inQuotes = false;\n        continue;\n      }\n\n      // Handle brackets for complex data\n      if (char === '[') inBrackets = true;\n      if (char === ']') inBrackets = false;\n\n      // Split on comma only if not in quotes or brackets\n      if (char === ',' && !inQuotes && !inBrackets) {\n        result.push(current.trim());\n        current = '';\n      } else {\n        current += char;\n      }\n    }\n    if (current) {\n      result.push(current.trim());\n    }\n    return result;\n  }\n  static extractImageUrl(imageData) {\n    if (!imageData) return undefined;\n    try {\n      // Clean up the image data first\n      const cleanedData = imageData.replace(/\\n/g, '').replace(/\\s+/g, ' ').trim();\n\n      // Handle JSON-like array format with imageUrl\n      if (cleanedData.includes('imageUrl')) {\n        // Try to extract imageUrl from the complex format\n        const urlMatch = cleanedData.match(/['\"]imageUrl['\"]\\s*:\\s*['\"]([^'\"]+)['\"]/);\n        if (urlMatch && urlMatch[1]) {\n          const url = urlMatch[1];\n          // Fix incomplete URLs\n          if (url.includes('assets.shop.loblaws.ca') && !url.startsWith('http')) {\n            return 'https://' + url;\n          }\n          return url;\n        }\n      }\n\n      // Handle direct URL\n      if (cleanedData.startsWith('http')) {\n        return cleanedData;\n      }\n\n      // Try to find any URL pattern in the data\n      const anyUrlMatch = cleanedData.match(/https?:\\/\\/[^\\s'\"]+/);\n      if (anyUrlMatch) {\n        return anyUrlMatch[0];\n      }\n    } catch (error) {\n      console.warn('Failed to extract image URL from:', imageData === null || imageData === void 0 ? void 0 : imageData.substring(0, 100));\n    }\n    return undefined;\n  }\n  static getFallbackMockProducts() {\n    return [{\n      id: '1',\n      name: 'English Cucumber',\n      description: 'Fresh English cucumber, 1 ea',\n      image: 'https://assets.shop.loblaws.ca/products/20070132001/b2/en/front/20070132001_front_a06_@2.png'\n    }, {\n      id: '2',\n      name: 'Green Onion',\n      description: 'Fresh green onion bunch',\n      image: 'https://assets.shop.loblaws.ca/products/20107500001/b2/en/front/20107500001_front_a06_@2.png'\n    }, {\n      id: '3',\n      name: 'Roma Tomatoes',\n      description: 'Fresh Roma tomatoes, sold by weight',\n      image: 'https://assets.shop.loblaws.ca/products/20143381001/b2/en/front/20143381001_front_a06_@2.png'\n    }, {\n      id: '4',\n      name: 'Broccoli',\n      description: 'Fresh broccoli crown, 1 ea',\n      image: 'https://assets.shop.loblaws.ca/products/20145621001/b2/en/front/20145621001_front_a06_@2.png'\n    }, {\n      id: '5',\n      name: 'Red Peppers',\n      description: 'Fresh red bell peppers, sold by weight',\n      image: 'https://assets.shop.loblaws.ca/products/20007535001/b2/en/front/20007535001_front_a06_@2.png'\n    }, {\n      id: '6',\n      name: 'Yellow Onions',\n      description: 'Yellow onions, 3 lb bag',\n      image: 'https://assets.shop.loblaws.ca/products/20811994001/b2/en/front/20811994001_front_a06_@2.png'\n    }, {\n      id: '7',\n      name: 'Celery Stalks',\n      description: 'Fresh celery stalks, 1 ea',\n      image: 'https://assets.shop.loblaws.ca/products/20163119001/b2/en/front/20163119001_front_a06_@2.png'\n    }, {\n      id: '8',\n      name: 'Lettuce Iceberg',\n      description: 'Fresh iceberg lettuce head, 1 ea',\n      image: 'https://assets.shop.loblaws.ca/products/20135326001/b2/en/front/20135326001_front_a06_@2.png'\n    }, {\n      id: '9',\n      name: 'Red Onion',\n      description: 'Fresh red onions, sold by weight',\n      image: 'https://assets.shop.loblaws.ca/products/20134101001/b2/en/front/20134101001_front_a06_@2.png'\n    }, {\n      id: '10',\n      name: 'Cauliflower',\n      description: 'Fresh cauliflower head, 1 ea',\n      image: 'https://assets.shop.loblaws.ca/products/20135377001/b2/en/front/20135377001_front_a06_@2.png'\n    },\n    // Add some No Name brand products\n    {\n      id: '21',\n      name: 'Bananas',\n      description: 'Fresh bananas, sold by weight',\n      brand: 'No Name'\n    }, {\n      id: '22',\n      name: 'Milk 2%',\n      description: 'Partly skimmed milk, 4L jug',\n      brand: 'No Name'\n    }, {\n      id: '23',\n      name: 'Bread White',\n      description: 'White sandwich bread, 675g loaf',\n      brand: 'No Name'\n    }, {\n      id: '24',\n      name: 'Eggs Large',\n      description: 'Large white eggs, 12-count',\n      brand: 'No Name'\n    }, {\n      id: '25',\n      name: 'Chicken Breast',\n      description: 'Boneless skinless chicken breast',\n      brand: 'No Name'\n    }];\n  }\n  static getProducts() {\n    return this.products;\n  }\n  static searchProducts(query, limit = 8) {\n    const searchTerm = query.toLowerCase();\n    return this.products.filter(product => product.name.toLowerCase().includes(searchTerm) || product.description.toLowerCase().includes(searchTerm) || product.brand && product.brand.toLowerCase().includes(searchTerm)).slice(0, limit);\n  }\n}\nCSVDataLoader.products = [];\nCSVDataLoader.isLoaded = false;\nCSVDataLoader.isLoading = false;","map":{"version":3,"names":["CSVDataLoader","loadProducts","isLoaded","products","isLoading","Promise","resolve","setTimeout","apr2025Products","loadCSVFile","push","console","log","length","error","warn","jan2025Products","sep2023Products","Error","getFallbackMockProducts","filePath","limit","response","fetch","ok","status","csvText","text","parseCSV","lines","split","headers","map","h","trim","replace","hasProductId","includes","hasName","maxRows","Math","min","i","Infinity","values","parseCSVLine","row","forEach","header","index","product","productId","imageUrl","extractImageUrl","productImage","id","name","title","description","image","brand","undefined","Name","extractImageFromProductUrl","line","result","current","inQuotes","inBrackets","char","nextChar","imageData","cleanedData","urlMatch","match","url","startsWith","anyUrlMatch","substring","getProducts","searchProducts","query","searchTerm","toLowerCase","filter","slice"],"sources":["/Users/jakobstrozberg/Desktop/nonamehackathon/noname-shopping-list/src/utils/csvLoader.ts"],"sourcesContent":["import { Product } from '../types';\n\ninterface CSVRow {\n  productId?: string;\n  productImage?: string;\n  brand?: string;\n  title?: string;\n  description?: string;\n  Name?: string;\n  [key: string]: any;\n}\n\nexport class CSVDataLoader {\n  private static products: Product[] = [];\n  private static isLoaded = false;\n  private static isLoading = false;\n\n  static async loadProducts(): Promise<Product[]> {\n    if (this.isLoaded) {\n      return this.products;\n    }\n\n    if (this.isLoading) {\n      // Wait for current loading to complete\n      while (this.isLoading) {\n        await new Promise(resolve => setTimeout(resolve, 100));\n      }\n      return this.products;\n    }\n\n    this.isLoading = true;\n\n    try {\n      const products: Product[] = [];\n      \n      // Try to load 2025 data first (has images)\n      try {\n        const apr2025Products = await this.loadCSVFile('/Dataset/grocery_data_apr_2025.csv', 300);\n        products.push(...apr2025Products);\n        console.log(`Loaded ${apr2025Products.length} products from April 2025 data`);\n      } catch (error) {\n        console.warn('Could not load April 2025 data:', error);\n      }\n      \n      // Try to load more 2025 data\n      try {\n        const jan2025Products = await this.loadCSVFile('/Dataset/grocery_data_jan_2025.csv', 200);\n        products.push(...jan2025Products);\n        console.log(`Loaded ${jan2025Products.length} products from January 2025 data`);\n      } catch (error) {\n        console.warn('Could not load January 2025 data:', error);\n      }\n      \n      // Load 2023 data as fallback (no images but good names)\n      try {\n        const sep2023Products = await this.loadCSVFile('/Dataset/grocery_data_sep_2023_clean.csv', 100);\n        products.push(...sep2023Products);\n        console.log(`Loaded ${sep2023Products.length} products from September 2023 data`);\n      } catch (error) {\n        console.warn('Could not load September 2023 data:', error);\n      }\n\n      // If we got some products, use them\n      if (products.length > 0) {\n        this.products = products;\n        this.isLoaded = true;\n        console.log(`✅ Successfully loaded ${products.length} total products from CSV data`);\n        return this.products;\n      }\n      \n      // Otherwise fall back to mock data\n      throw new Error('No products could be loaded from CSV files');\n    } catch (error) {\n      console.error('❌ Failed to load CSV data, falling back to mock data:', error);\n      this.products = this.getFallbackMockProducts();\n      this.isLoaded = true;\n      return this.products;\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  private static async loadCSVFile(filePath: string, limit?: number): Promise<Product[]> {\n    try {\n      // Try to load from public folder first\n      const response = await fetch(filePath);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const csvText = await response.text();\n      return this.parseCSV(csvText, limit);\n    } catch (error) {\n      console.warn(`Could not load ${filePath} from public folder:`, error);\n      throw error;\n    }\n  }\n\n  private static parseCSV(csvText: string, limit?: number): Product[] {\n    const lines = csvText.split('\\n');\n    if (lines.length < 2) return [];\n\n    const headers = lines[0].split(',').map(h => h.trim().replace(/\"/g, ''));\n    const products: Product[] = [];\n\n    // Determine which CSV format we're dealing with\n    const hasProductId = headers.includes('productId');\n    const hasName = headers.includes('Name');\n\n    const maxRows = limit ? Math.min(lines.length - 1, limit) : lines.length - 1;\n\n    for (let i = 1; i <= maxRows && products.length < (limit || Infinity); i++) {\n      try {\n        const values = this.parseCSVLine(lines[i]);\n        if (values.length < headers.length - 2) continue; // Skip incomplete rows\n\n        const row: CSVRow = {};\n        headers.forEach((header, index) => {\n          if (values[index]) {\n            row[header] = values[index].trim().replace(/\"/g, '');\n          }\n        });\n\n        let product: Product | null = null;\n\n        if (hasProductId && row.productId) {\n          // New format (2025 data)\n          const imageUrl = this.extractImageUrl(row.productImage);\n          product = {\n            id: row.productId,\n            name: row.title || 'Unknown Product',\n            description: row.description || '',\n            image: imageUrl,\n            brand: row.brand || undefined\n          };\n          \n          // Debug log for first few products\n          if (i < 5 && imageUrl) {\n            console.log(`Product: ${product.name}, Image URL: ${imageUrl}`);\n          }\n        } else if (hasName && row.Name) {\n          // Old format (2023 data) - try to get image from URL column if exists\n          const imageUrl = row['Product URL'] ? this.extractImageFromProductUrl(row['Product URL']) : undefined;\n          product = {\n            id: row['Product ID'] || `legacy_${i}`,\n            name: row.Name,\n            description: row['Price Per Each'] || row['Current Price'] || '',\n            image: imageUrl,\n            brand: row['Category'] || undefined\n          };\n        }\n\n        if (product && product.name && product.name.length > 2) {\n          products.push(product);\n        }\n      } catch (error) {\n        // Skip malformed rows\n        continue;\n      }\n    }\n\n    return products;\n  }\n\n  private static parseCSVLine(line: string): string[] {\n    const result: string[] = [];\n    let current = '';\n    let inQuotes = false;\n    let inBrackets = false;\n    \n    for (let i = 0; i < line.length; i++) {\n      const char = line[i];\n      const nextChar = line[i + 1];\n      \n      // Handle quotes\n      if (char === '\"' && (i === 0 || line[i - 1] === ',')) {\n        inQuotes = true;\n        continue;\n      } else if (char === '\"' && inQuotes && (nextChar === ',' || nextChar === undefined)) {\n        inQuotes = false;\n        continue;\n      }\n      \n      // Handle brackets for complex data\n      if (char === '[') inBrackets = true;\n      if (char === ']') inBrackets = false;\n      \n      // Split on comma only if not in quotes or brackets\n      if (char === ',' && !inQuotes && !inBrackets) {\n        result.push(current.trim());\n        current = '';\n      } else {\n        current += char;\n      }\n    }\n    \n    if (current) {\n      result.push(current.trim());\n    }\n    \n    return result;\n  }\n\n  private static extractImageUrl(imageData?: string): string | undefined {\n    if (!imageData) return undefined;\n    \n    try {\n      // Clean up the image data first\n      const cleanedData = imageData.replace(/\\n/g, '').replace(/\\s+/g, ' ').trim();\n      \n      // Handle JSON-like array format with imageUrl\n      if (cleanedData.includes('imageUrl')) {\n        // Try to extract imageUrl from the complex format\n        const urlMatch = cleanedData.match(/['\"]imageUrl['\"]\\s*:\\s*['\"]([^'\"]+)['\"]/);\n        if (urlMatch && urlMatch[1]) {\n          const url = urlMatch[1];\n          // Fix incomplete URLs\n          if (url.includes('assets.shop.loblaws.ca') && !url.startsWith('http')) {\n            return 'https://' + url;\n          }\n          return url;\n        }\n      }\n      \n      // Handle direct URL\n      if (cleanedData.startsWith('http')) {\n        return cleanedData;\n      }\n      \n      // Try to find any URL pattern in the data\n      const anyUrlMatch = cleanedData.match(/https?:\\/\\/[^\\s'\"]+/);\n      if (anyUrlMatch) {\n        return anyUrlMatch[0];\n      }\n    } catch (error) {\n      console.warn('Failed to extract image URL from:', imageData?.substring(0, 100));\n    }\n    \n    return undefined;\n  }\n\n  private static getFallbackMockProducts(): Product[] {\n    return [\n      { id: '1', name: 'English Cucumber', description: 'Fresh English cucumber, 1 ea', image: 'https://assets.shop.loblaws.ca/products/20070132001/b2/en/front/20070132001_front_a06_@2.png' },\n      { id: '2', name: 'Green Onion', description: 'Fresh green onion bunch', image: 'https://assets.shop.loblaws.ca/products/20107500001/b2/en/front/20107500001_front_a06_@2.png' },\n      { id: '3', name: 'Roma Tomatoes', description: 'Fresh Roma tomatoes, sold by weight', image: 'https://assets.shop.loblaws.ca/products/20143381001/b2/en/front/20143381001_front_a06_@2.png' },\n      { id: '4', name: 'Broccoli', description: 'Fresh broccoli crown, 1 ea', image: 'https://assets.shop.loblaws.ca/products/20145621001/b2/en/front/20145621001_front_a06_@2.png' },\n      { id: '5', name: 'Red Peppers', description: 'Fresh red bell peppers, sold by weight', image: 'https://assets.shop.loblaws.ca/products/20007535001/b2/en/front/20007535001_front_a06_@2.png' },\n      { id: '6', name: 'Yellow Onions', description: 'Yellow onions, 3 lb bag', image: 'https://assets.shop.loblaws.ca/products/20811994001/b2/en/front/20811994001_front_a06_@2.png' },\n      { id: '7', name: 'Celery Stalks', description: 'Fresh celery stalks, 1 ea', image: 'https://assets.shop.loblaws.ca/products/20163119001/b2/en/front/20163119001_front_a06_@2.png' },\n      { id: '8', name: 'Lettuce Iceberg', description: 'Fresh iceberg lettuce head, 1 ea', image: 'https://assets.shop.loblaws.ca/products/20135326001/b2/en/front/20135326001_front_a06_@2.png' },\n      { id: '9', name: 'Red Onion', description: 'Fresh red onions, sold by weight', image: 'https://assets.shop.loblaws.ca/products/20134101001/b2/en/front/20134101001_front_a06_@2.png' },\n      { id: '10', name: 'Cauliflower', description: 'Fresh cauliflower head, 1 ea', image: 'https://assets.shop.loblaws.ca/products/20135377001/b2/en/front/20135377001_front_a06_@2.png' },\n      // Add some No Name brand products\n      { id: '21', name: 'Bananas', description: 'Fresh bananas, sold by weight', brand: 'No Name' },\n      { id: '22', name: 'Milk 2%', description: 'Partly skimmed milk, 4L jug', brand: 'No Name' },\n      { id: '23', name: 'Bread White', description: 'White sandwich bread, 675g loaf', brand: 'No Name' },\n      { id: '24', name: 'Eggs Large', description: 'Large white eggs, 12-count', brand: 'No Name' },\n      { id: '25', name: 'Chicken Breast', description: 'Boneless skinless chicken breast', brand: 'No Name' },\n    ];\n  }\n\n  static getProducts(): Product[] {\n    return this.products;\n  }\n\n  static searchProducts(query: string, limit: number = 8): Product[] {\n    const searchTerm = query.toLowerCase();\n    return this.products\n      .filter(product => \n        product.name.toLowerCase().includes(searchTerm) ||\n        product.description.toLowerCase().includes(searchTerm) ||\n        (product.brand && product.brand.toLowerCase().includes(searchTerm))\n      )\n      .slice(0, limit);\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}