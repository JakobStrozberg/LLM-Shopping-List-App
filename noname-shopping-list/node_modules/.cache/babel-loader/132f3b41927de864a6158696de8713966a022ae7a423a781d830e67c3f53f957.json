{"ast":null,"code":"export class CSVDataLoader {\n  static async loadProducts() {\n    if (this.isLoaded) {\n      return this.products;\n    }\n    if (this.isLoading) {\n      // Wait for current loading to complete\n      while (this.isLoading) {\n        await new Promise(resolve => setTimeout(resolve, 100));\n      }\n      return this.products;\n    }\n    this.isLoading = true;\n    try {\n      // Load the cleanest dataset first (2023 clean version)\n      const products = await this.loadCSVFile('/Dataset/grocery_data_sep_2023_clean.csv');\n\n      // If that works, also load some 2025 data for more variety\n      try {\n        const moreProducts = await this.loadCSVFile('/Dataset/grocery_data_jan_2025.csv', 500); // Limit to 500 items\n        products.push(...moreProducts);\n      } catch (error) {\n        console.warn('Could not load additional 2025 data:', error);\n      }\n      this.products = products;\n      this.isLoaded = true;\n      // Add some guaranteed products with images if we don't have many\n      if (products.length < 50) {\n        const fallbackProducts = this.getFallbackMockProducts();\n        products.push(...fallbackProducts);\n      }\n      console.log(`‚úÖ Loaded ${products.length} products from CSV data`);\n      console.log(`üñºÔ∏è Products with images: ${products.filter(p => p.image).length}`);\n      return this.products;\n    } catch (error) {\n      console.error('‚ùå Failed to load CSV data, falling back to mock data:', error);\n      this.products = this.getFallbackMockProducts();\n      this.isLoaded = true;\n      return this.products;\n    } finally {\n      this.isLoading = false;\n    }\n  }\n  static async loadCSVFile(filePath, limit) {\n    try {\n      // Try to load from public folder first\n      const response = await fetch(filePath);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const csvText = await response.text();\n      return this.parseCSV(csvText, limit);\n    } catch (error) {\n      console.warn(`Could not load ${filePath} from public folder:`, error);\n      throw error;\n    }\n  }\n  static parseCSV(csvText, limit) {\n    const lines = csvText.split('\\n');\n    if (lines.length < 2) return [];\n    const headers = lines[0].split(',').map(h => h.trim().replace(/\"/g, ''));\n    const products = [];\n\n    // Determine which CSV format we're dealing with\n    const hasProductId = headers.includes('productId');\n    const hasName = headers.includes('Name');\n    const maxRows = limit ? Math.min(lines.length - 1, limit) : lines.length - 1;\n    for (let i = 1; i <= maxRows && products.length < (limit || Infinity); i++) {\n      try {\n        const values = this.parseCSVLine(lines[i]);\n        if (values.length < headers.length - 2) continue; // Skip incomplete rows\n\n        const row = {};\n        headers.forEach((header, index) => {\n          if (values[index]) {\n            row[header] = values[index].trim().replace(/\"/g, '');\n          }\n        });\n        let product = null;\n        if (hasProductId && row.productId) {\n          // New format (2025 data)\n          const imageUrl = this.extractImageUrl(row.productImage);\n          if (imageUrl && i <= 5) {\n            console.log(`üñºÔ∏è Extracted image for ${row.title}:`, imageUrl);\n          }\n          product = {\n            id: row.productId,\n            name: row.title || 'Unknown Product',\n            description: row.description || '',\n            image: imageUrl,\n            brand: row.brand || undefined\n          };\n        } else if (hasName && row.Name) {\n          // Old format (2023 data)\n          product = {\n            id: `legacy_${i}`,\n            name: row.Name,\n            description: row['Price Per Each'] || row['Current Price'] || '',\n            image: undefined,\n            // Old format doesn't have images\n            brand: row['Category'] || undefined\n          };\n        }\n        if (product && product.name && product.name.length > 2) {\n          products.push(product);\n        }\n      } catch (error) {\n        // Skip malformed rows\n        continue;\n      }\n    }\n    return products;\n  }\n  static parseCSVLine(line) {\n    const result = [];\n    let current = '';\n    let inQuotes = false;\n    let quoteChar = '';\n    for (let i = 0; i < line.length; i++) {\n      const char = line[i];\n      if ((char === '\"' || char === \"'\") && !inQuotes) {\n        inQuotes = true;\n        quoteChar = char;\n      } else if (char === quoteChar && inQuotes) {\n        // Check if this is an escaped quote\n        if (i + 1 < line.length && line[i + 1] === char) {\n          current += char;\n          i++; // Skip the next quote\n        } else {\n          inQuotes = false;\n          quoteChar = '';\n        }\n      } else if (char === ',' && !inQuotes) {\n        result.push(current.trim());\n        current = '';\n      } else {\n        current += char;\n      }\n    }\n    result.push(current.trim());\n    return result;\n  }\n  static extractImageUrl(imageData) {\n    if (!imageData) return undefined;\n    try {\n      // Handle JSON-like image data with single quotes\n      if (imageData.includes('imageUrl')) {\n        // Try different image URL patterns\n        const patterns = [/'imageUrl':\\s*'([^']+)'/, /\"imageUrl\":\\s*\"([^\"]+)\"/, /'largeUrl':\\s*'([^']+)'/, /\"largeUrl\":\\s*\"([^\"]+)\"/, /'mediumUrl':\\s*'([^']+)'/, /\"mediumUrl\":\\s*\"([^\"]+)\"/];\n        for (const pattern of patterns) {\n          const match = imageData.match(pattern);\n          if (match && match[1]) {\n            return match[1];\n          }\n        }\n      }\n\n      // Handle direct URL\n      if (imageData.startsWith('http')) {\n        return imageData;\n      }\n\n      // Try to parse as JSON (replace single quotes with double quotes)\n      const normalizedJson = imageData.replace(/'/g, '\"');\n      const parsed = JSON.parse(normalizedJson);\n      if (Array.isArray(parsed) && parsed[0] && parsed[0].imageUrl) {\n        return parsed[0].imageUrl;\n      }\n    } catch (error) {\n      // Return undefined for invalid image data\n    }\n    return undefined;\n  }\n  static getFallbackMockProducts() {\n    return [{\n      id: '1',\n      name: 'English Cucumber',\n      description: 'Fresh English cucumber, 1 ea',\n      image: 'https://assets.shop.loblaws.ca/products/20070132001/b2/en/front/20070132001_front_a06_@2.png'\n    }, {\n      id: '2',\n      name: 'Green Onion',\n      description: 'Fresh green onion bunch',\n      image: 'https://assets.shop.loblaws.ca/products/20107500001/b2/en/front/20107500001_front_a06_@2.png'\n    }, {\n      id: '3',\n      name: 'Roma Tomatoes',\n      description: 'Fresh Roma tomatoes, sold by weight',\n      image: 'https://assets.shop.loblaws.ca/products/20143381001/b2/en/front/20143381001_front_a06_@2.png'\n    }, {\n      id: '4',\n      name: 'Broccoli',\n      description: 'Fresh broccoli crown, 1 ea',\n      image: 'https://assets.shop.loblaws.ca/products/20145621001/b2/en/front/20145621001_front_a06_@2.png'\n    }, {\n      id: '5',\n      name: 'Red Peppers',\n      description: 'Fresh red bell peppers, sold by weight',\n      image: 'https://assets.shop.loblaws.ca/products/20007535001/b2/en/front/20007535001_front_a06_@2.png'\n    }, {\n      id: '6',\n      name: 'Yellow Onions',\n      description: 'Yellow onions, 3 lb bag',\n      image: 'https://assets.shop.loblaws.ca/products/20811994001/b2/en/front/20811994001_front_a06_@2.png'\n    }, {\n      id: '7',\n      name: 'Celery Stalks',\n      description: 'Fresh celery stalks, 1 ea',\n      image: 'https://assets.shop.loblaws.ca/products/20163119001/b2/en/front/20163119001_front_a06_@2.png'\n    }, {\n      id: '8',\n      name: 'Lettuce Iceberg',\n      description: 'Fresh iceberg lettuce head, 1 ea',\n      image: 'https://assets.shop.loblaws.ca/products/20135326001/b2/en/front/20135326001_front_a06_@2.png'\n    }, {\n      id: '9',\n      name: 'Red Onion',\n      description: 'Fresh red onions, sold by weight',\n      image: 'https://assets.shop.loblaws.ca/products/20134101001/b2/en/front/20134101001_front_a06_@2.png'\n    }, {\n      id: '10',\n      name: 'Cauliflower',\n      description: 'Fresh cauliflower head, 1 ea',\n      image: 'https://assets.shop.loblaws.ca/products/20135377001/b2/en/front/20135377001_front_a06_@2.png'\n    },\n    // Add some No Name brand products\n    {\n      id: '21',\n      name: 'Bananas',\n      description: 'Fresh bananas, sold by weight',\n      brand: 'No Name'\n    }, {\n      id: '22',\n      name: 'Milk 2%',\n      description: 'Partly skimmed milk, 4L jug',\n      brand: 'No Name'\n    }, {\n      id: '23',\n      name: 'Bread White',\n      description: 'White sandwich bread, 675g loaf',\n      brand: 'No Name'\n    }, {\n      id: '24',\n      name: 'Eggs Large',\n      description: 'Large white eggs, 12-count',\n      brand: 'No Name'\n    }, {\n      id: '25',\n      name: 'Chicken Breast',\n      description: 'Boneless skinless chicken breast',\n      brand: 'No Name'\n    }];\n  }\n  static getProducts() {\n    return this.products;\n  }\n  static searchProducts(query, limit = 8) {\n    const searchTerm = query.toLowerCase();\n    return this.products.filter(product => product.name.toLowerCase().includes(searchTerm) || product.description.toLowerCase().includes(searchTerm) || product.brand && product.brand.toLowerCase().includes(searchTerm)).slice(0, limit);\n  }\n}\nCSVDataLoader.products = [];\nCSVDataLoader.isLoaded = false;\nCSVDataLoader.isLoading = false;","map":{"version":3,"names":["CSVDataLoader","loadProducts","isLoaded","products","isLoading","Promise","resolve","setTimeout","loadCSVFile","moreProducts","push","error","console","warn","length","fallbackProducts","getFallbackMockProducts","log","filter","p","image","filePath","limit","response","fetch","ok","Error","status","csvText","text","parseCSV","lines","split","headers","map","h","trim","replace","hasProductId","includes","hasName","maxRows","Math","min","i","Infinity","values","parseCSVLine","row","forEach","header","index","product","productId","imageUrl","extractImageUrl","productImage","title","id","name","description","brand","undefined","Name","line","result","current","inQuotes","quoteChar","char","imageData","patterns","pattern","match","startsWith","normalizedJson","parsed","JSON","parse","Array","isArray","getProducts","searchProducts","query","searchTerm","toLowerCase","slice"],"sources":["/Users/jakobstrozberg/Desktop/nonamehackathon/noname-shopping-list/src/utils/csvLoader.ts"],"sourcesContent":["import { Product } from '../types';\n\ninterface CSVRow {\n  productId?: string;\n  productImage?: string;\n  brand?: string;\n  title?: string;\n  description?: string;\n  Name?: string;\n  [key: string]: any;\n}\n\nexport class CSVDataLoader {\n  private static products: Product[] = [];\n  private static isLoaded = false;\n  private static isLoading = false;\n\n  static async loadProducts(): Promise<Product[]> {\n    if (this.isLoaded) {\n      return this.products;\n    }\n\n    if (this.isLoading) {\n      // Wait for current loading to complete\n      while (this.isLoading) {\n        await new Promise(resolve => setTimeout(resolve, 100));\n      }\n      return this.products;\n    }\n\n    this.isLoading = true;\n\n    try {\n      // Load the cleanest dataset first (2023 clean version)\n      const products = await this.loadCSVFile('/Dataset/grocery_data_sep_2023_clean.csv');\n      \n      // If that works, also load some 2025 data for more variety\n      try {\n        const moreProducts = await this.loadCSVFile('/Dataset/grocery_data_jan_2025.csv', 500); // Limit to 500 items\n        products.push(...moreProducts);\n      } catch (error) {\n        console.warn('Could not load additional 2025 data:', error);\n      }\n\n      this.products = products;\n      this.isLoaded = true;\n      // Add some guaranteed products with images if we don't have many\n      if (products.length < 50) {\n        const fallbackProducts = this.getFallbackMockProducts();\n        products.push(...fallbackProducts);\n      }\n      \n      console.log(`‚úÖ Loaded ${products.length} products from CSV data`);\n      console.log(`üñºÔ∏è Products with images: ${products.filter(p => p.image).length}`);\n      \n      return this.products;\n    } catch (error) {\n      console.error('‚ùå Failed to load CSV data, falling back to mock data:', error);\n      this.products = this.getFallbackMockProducts();\n      this.isLoaded = true;\n      return this.products;\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  private static async loadCSVFile(filePath: string, limit?: number): Promise<Product[]> {\n    try {\n      // Try to load from public folder first\n      const response = await fetch(filePath);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const csvText = await response.text();\n      return this.parseCSV(csvText, limit);\n    } catch (error) {\n      console.warn(`Could not load ${filePath} from public folder:`, error);\n      throw error;\n    }\n  }\n\n  private static parseCSV(csvText: string, limit?: number): Product[] {\n    const lines = csvText.split('\\n');\n    if (lines.length < 2) return [];\n\n    const headers = lines[0].split(',').map(h => h.trim().replace(/\"/g, ''));\n    const products: Product[] = [];\n\n    // Determine which CSV format we're dealing with\n    const hasProductId = headers.includes('productId');\n    const hasName = headers.includes('Name');\n\n    const maxRows = limit ? Math.min(lines.length - 1, limit) : lines.length - 1;\n\n    for (let i = 1; i <= maxRows && products.length < (limit || Infinity); i++) {\n      try {\n        const values = this.parseCSVLine(lines[i]);\n        if (values.length < headers.length - 2) continue; // Skip incomplete rows\n\n        const row: CSVRow = {};\n        headers.forEach((header, index) => {\n          if (values[index]) {\n            row[header] = values[index].trim().replace(/\"/g, '');\n          }\n        });\n\n        let product: Product | null = null;\n\n        if (hasProductId && row.productId) {\n          // New format (2025 data)\n          const imageUrl = this.extractImageUrl(row.productImage);\n          if (imageUrl && i <= 5) {\n            console.log(`üñºÔ∏è Extracted image for ${row.title}:`, imageUrl);\n          }\n          product = {\n            id: row.productId,\n            name: row.title || 'Unknown Product',\n            description: row.description || '',\n            image: imageUrl,\n            brand: row.brand || undefined\n          };\n        } else if (hasName && row.Name) {\n          // Old format (2023 data)\n          product = {\n            id: `legacy_${i}`,\n            name: row.Name,\n            description: row['Price Per Each'] || row['Current Price'] || '',\n            image: undefined, // Old format doesn't have images\n            brand: row['Category'] || undefined\n          };\n        }\n\n        if (product && product.name && product.name.length > 2) {\n          products.push(product);\n        }\n      } catch (error) {\n        // Skip malformed rows\n        continue;\n      }\n    }\n\n    return products;\n  }\n\n  private static parseCSVLine(line: string): string[] {\n    const result: string[] = [];\n    let current = '';\n    let inQuotes = false;\n    let quoteChar = '';\n    \n    for (let i = 0; i < line.length; i++) {\n      const char = line[i];\n      \n      if ((char === '\"' || char === \"'\") && !inQuotes) {\n        inQuotes = true;\n        quoteChar = char;\n      } else if (char === quoteChar && inQuotes) {\n        // Check if this is an escaped quote\n        if (i + 1 < line.length && line[i + 1] === char) {\n          current += char;\n          i++; // Skip the next quote\n        } else {\n          inQuotes = false;\n          quoteChar = '';\n        }\n      } else if (char === ',' && !inQuotes) {\n        result.push(current.trim());\n        current = '';\n      } else {\n        current += char;\n      }\n    }\n    \n    result.push(current.trim());\n    return result;\n  }\n\n  private static extractImageUrl(imageData?: string): string | undefined {\n    if (!imageData) return undefined;\n    \n    try {\n      // Handle JSON-like image data with single quotes\n      if (imageData.includes('imageUrl')) {\n        // Try different image URL patterns\n        const patterns = [\n          /'imageUrl':\\s*'([^']+)'/,\n          /\"imageUrl\":\\s*\"([^\"]+)\"/,\n          /'largeUrl':\\s*'([^']+)'/,\n          /\"largeUrl\":\\s*\"([^\"]+)\"/,\n          /'mediumUrl':\\s*'([^']+)'/,\n          /\"mediumUrl\":\\s*\"([^\"]+)\"/\n        ];\n        \n        for (const pattern of patterns) {\n          const match = imageData.match(pattern);\n          if (match && match[1]) {\n            return match[1];\n          }\n        }\n      }\n      \n      // Handle direct URL\n      if (imageData.startsWith('http')) {\n        return imageData;\n      }\n      \n      // Try to parse as JSON (replace single quotes with double quotes)\n      const normalizedJson = imageData.replace(/'/g, '\"');\n      const parsed = JSON.parse(normalizedJson);\n      if (Array.isArray(parsed) && parsed[0] && parsed[0].imageUrl) {\n        return parsed[0].imageUrl;\n      }\n      \n    } catch (error) {\n      // Return undefined for invalid image data\n    }\n    \n    return undefined;\n  }\n\n  private static getFallbackMockProducts(): Product[] {\n    return [\n      { id: '1', name: 'English Cucumber', description: 'Fresh English cucumber, 1 ea', image: 'https://assets.shop.loblaws.ca/products/20070132001/b2/en/front/20070132001_front_a06_@2.png' },\n      { id: '2', name: 'Green Onion', description: 'Fresh green onion bunch', image: 'https://assets.shop.loblaws.ca/products/20107500001/b2/en/front/20107500001_front_a06_@2.png' },\n      { id: '3', name: 'Roma Tomatoes', description: 'Fresh Roma tomatoes, sold by weight', image: 'https://assets.shop.loblaws.ca/products/20143381001/b2/en/front/20143381001_front_a06_@2.png' },\n      { id: '4', name: 'Broccoli', description: 'Fresh broccoli crown, 1 ea', image: 'https://assets.shop.loblaws.ca/products/20145621001/b2/en/front/20145621001_front_a06_@2.png' },\n      { id: '5', name: 'Red Peppers', description: 'Fresh red bell peppers, sold by weight', image: 'https://assets.shop.loblaws.ca/products/20007535001/b2/en/front/20007535001_front_a06_@2.png' },\n      { id: '6', name: 'Yellow Onions', description: 'Yellow onions, 3 lb bag', image: 'https://assets.shop.loblaws.ca/products/20811994001/b2/en/front/20811994001_front_a06_@2.png' },\n      { id: '7', name: 'Celery Stalks', description: 'Fresh celery stalks, 1 ea', image: 'https://assets.shop.loblaws.ca/products/20163119001/b2/en/front/20163119001_front_a06_@2.png' },\n      { id: '8', name: 'Lettuce Iceberg', description: 'Fresh iceberg lettuce head, 1 ea', image: 'https://assets.shop.loblaws.ca/products/20135326001/b2/en/front/20135326001_front_a06_@2.png' },\n      { id: '9', name: 'Red Onion', description: 'Fresh red onions, sold by weight', image: 'https://assets.shop.loblaws.ca/products/20134101001/b2/en/front/20134101001_front_a06_@2.png' },\n      { id: '10', name: 'Cauliflower', description: 'Fresh cauliflower head, 1 ea', image: 'https://assets.shop.loblaws.ca/products/20135377001/b2/en/front/20135377001_front_a06_@2.png' },\n      // Add some No Name brand products\n      { id: '21', name: 'Bananas', description: 'Fresh bananas, sold by weight', brand: 'No Name' },\n      { id: '22', name: 'Milk 2%', description: 'Partly skimmed milk, 4L jug', brand: 'No Name' },\n      { id: '23', name: 'Bread White', description: 'White sandwich bread, 675g loaf', brand: 'No Name' },\n      { id: '24', name: 'Eggs Large', description: 'Large white eggs, 12-count', brand: 'No Name' },\n      { id: '25', name: 'Chicken Breast', description: 'Boneless skinless chicken breast', brand: 'No Name' },\n    ];\n  }\n\n  static getProducts(): Product[] {\n    return this.products;\n  }\n\n  static searchProducts(query: string, limit: number = 8): Product[] {\n    const searchTerm = query.toLowerCase();\n    return this.products\n      .filter(product => \n        product.name.toLowerCase().includes(searchTerm) ||\n        product.description.toLowerCase().includes(searchTerm) ||\n        (product.brand && product.brand.toLowerCase().includes(searchTerm))\n      )\n      .slice(0, limit);\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}